<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
   <link rel="stylesheet" href="css/java_styles.css">
    <link rel="stylesheet" href="css/java_prism.css">
    <title>Java Strings</title>
</head>

<body>
   {{>java_header}}
    <div class="wrapper">
        {{>java_menu}}       <div class="content card" id="main_content">
            <h1 style="font-family: 'Calistoga', cursive;">Java</h1>
            <h3>Graphs</h3>
            <p>Graphs are mathematical structures that represent pairwise relationships between objects. They consist of two main components: vertices (nodes) and edges (connections between vertices)</p>
            <p><ul>
                <li>
                    <h5>Vertices:</h5>  Represent entities or elements.
                </li>
                <li>
                    <h5>Edges:</h5> Represent relationships or connections between vertices.
                </li>
            </ul></p>
            <p>Graphs consist of two things: The set V=V(G) whose elements are called vertices, points or nodes of G. Set E = E(G) of an unordered pair of distinct vertices called edges of G. We denote such a graph by G(V, E) vertices u and v are said to be adjacent if there is an edge e ={u, v}.</p>
            <div style="display: flex;">
                <div>
                    Graphs can be classified into various types:
                    <ol>
                        <li>
                            <h5>Directed Graphs (Digraphs):</h5>Edges have a direction.
                        </li>
                        <li>
                            <h5>Undirected Graphs:</h5>Edges have no direction.
                        </li>
                        <li>
                            <h5>Weighted Graphs:</h5>Edges have weights.
                        </li>
                        <li>
                            <h5>Cyclic and Acyclic Graphs:</h5>Graphs that contain cycles or don't have cycles, respectively.
                        </li>
                        <li>
                            <h5>Complete Graphs:</h5>Every pair of distinct nodes is connected by a unique edge.
                        </li>
                        <li>
                            <h5>Bipartite Graphs:</h5>Nodes can be divided into two disjoint sets such that each edge connects nodes from different sets.
                        </li>
                    </ol>
                </div>
                <img src="./graphs.png" width="40%">
            </div>
            <h4>Graph traversal</h4>
            <p>Graph traversal is like exploring a map systematically to visit every location (vertex) and every path (edge) in a graph. It helps in examining and processing all the elements of a graph efficiently.</p>
            <p><h5>Breadth-First Search (BFS):</h5> Imagine you’re exploring a city block by block. You start at a location (vertex), visit all its neighbors (adjacent vertices), then move to their neighbors, and so on. In BFS, you explore all the nearest neighbors before moving to the next level. It works level by level, like exploring one street entirely before moving to the next. BFS is great for finding the shortest path between two points and analyzing the graph's structure.</p>
            <p><h5>Depth-First Search (DFS):</h5>Picture yourself going as deep as possible exploring a path before backtracking. It starts at a location (vertex), then goes as far as possible along one path (edge), exploring as deeply as it can before backtracking and trying another. DFS can be visualized like exploring a maze by going through one path until you hit a dead end, then backtracking to try another route. It’s useful for things like topological sorting and finding connected components in a graph.</p>
            <button type="button" class="btn btn-primary" data-toggle="modal" data-target=".bd-example-modal-lg">Check
                example >></button>

            <div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel"
                aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div data-pym-src="https://www.jdoodle.com/embed/v0/6xtL"></div>
                    </div>
                </div>
            </div>
            <div class="page_change">
                <a class="btn btn-primary prev" href="/java_trees">Prev</a>
            </div>
        </div>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
            crossorigin="anonymous"></script>
        <script src="https://www.jdoodle.com/assets/jdoodle-pym.min.js" type="text/Javascript"></script>
        <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
            integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
            crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js"
            integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
            crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js"
            integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
            crossorigin="anonymous"></script>
        </script>
        <script src="js/chatbot.js"></script>
        <script src="js/java_prism.js"></script>
        <script>
            function show_beginner() {
                document.getElementById('Beginner').style.display = 'block';
                document.getElementById('down_b').style.display = 'none';
                document.getElementById('up_b').style.display = 'inline';
            }
            function hide_beginner() {
                document.getElementById('Beginner').style.display = 'none';
                document.getElementById('down_b').style.display = 'inline';
                document.getElementById('up_b').style.display = 'none';
            }
            function show_intermediate() {
                document.getElementById('Intermediate').style.display = 'block';
                document.getElementById('down_i').style.display = 'none';
                document.getElementById('up_i').style.display = 'inline';
            }
            function hide_intermediate() {
                document.getElementById('Intermediate').style.display = 'none';
                document.getElementById('down_i').style.display = 'inline';
                document.getElementById('up_i').style.display = 'none';
            }
            function show_ds() {
                document.getElementById('data_structures').style.display = 'block';
                document.getElementById('down_ds').style.display = 'none';
                document.getElementById('up_ds').style.display = 'inline';
            }
            function hide_ds() {
                document.getElementById('data_structures').style.display = 'none';
                document.getElementById('down_ds').style.display = 'inline';
                document.getElementById('up_ds').style.display = 'none';
            }
            function show_oops() {
                document.getElementById('OOPS').style.display = 'block';
                document.getElementById('down_oops').style.display = 'none';
                document.getElementById('up_oops').style.display = 'inline';
            }
            function hide_oops() {
                document.getElementById('OOPS').style.display = 'none';
                document.getElementById('down_oops').style.display = 'inline';
                document.getElementById('up_oops').style.display = 'none';
            }
            function show() {
                document.getElementById('menu').style.transform = 'translate(260px)'
                document.getElementById('hide').style.display = 'block';
                document.getElementById('show').style.display = 'none';
                document.getElementById('main_content').style.marginLeft = '260px'
            }
            function hide() {
                document.getElementById('menu').style.transform = 'translate(-250px)';
                document.getElementById('show').style.display = 'block';
                document.getElementById('main_content').style.marginLeft = '0px'
            }
        </script>
</body>
</html>